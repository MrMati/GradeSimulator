plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'com.github.psxpaul.execfork' version '0.1.13'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: "org.jlleitschuh.gradle.ktlint"



ext {
    PUBLISH_VERSION = '0.17.4'

    okhttp3 = "3.12.10"
    threetenbp = "1.4.3"
    slf4j = "1.7.30"
}


repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

version = PUBLISH_VERSION as Object
group = "pl.mati.uonet.backend"


ktlint {
    additionalEditorconfigFile = file(".editorconfig")
    disabledRules = [
        "no-wildcard-imports",
        "import-ordering",
        "max-line-length"
    ]
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        javaParameters = true
    }
}

jar {
   manifest {
       attributes 'Main-Class': 'pl.mati.uonet.backend.MainKt'
	
}}
   

dependencies {

    //compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'

    implementation "io.github.wulkanowy:sdk:0.17.4"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "io.reactivex.rxjava2:rxjava:2.2.19"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3"

    implementation "org.threeten:threetenbp:$threetenbp"

    implementation "org.slf4j:slf4j-simple:1.7.28"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "io.javalin:javalin:3.8.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'com.konghq:unirest-java:3.7.02'
    testImplementation 'org.assertj:assertj-core:3.15.0'
}

test {
    useJUnitPlatform()
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

task startDaemon(type: com.github.psxpaul.task.ExecFork) {
    if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        executable = 'node.exe'
    } else {
        executable = 'node'
    }

    args = ['bin/www']
    workingDir = "$projectDir/fake-log/"
    //standardOutput = "$projectDir/daemon.log"
    //errorOutput = "$projectDir/daemon-error.log"
    stopAfter = test
    waitForOutput = 'ready'

}

test.dependsOn startDaemon

